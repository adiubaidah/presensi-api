// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  mahasiswa
  dosen
  admin
}

model Akun {
  username  String     @id @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  isActive  Boolean    @default(true)
  role      Role
  mahasiswa Mahasiswa?
  dosen     Dosen?
}

enum Kelamin {
  L
  P
}

model Mahasiswa {
  nim          String     @id @db.Char(10)
  nama         String     @db.VarChar(255)
  email        String     @db.VarChar(255)
  kelamin      Kelamin
  akun         Akun?      @relation(fields: [akunUsername], references: [username])
  akunUsername String?    @unique @db.VarChar(255)
  presensi     Presensi[]
  kelas        Kelas?     @relation(fields: [kelasKode], references: [kode])
  kelasKode    String?    @db.VarChar(30)
}

model Dosen {
  nidn         String         @id @db.Char(10)
  nama         String         @db.VarChar(255)
  email        String         @db.VarChar(255)
  kelamin      Kelamin
  akun         Akun?          @relation(fields: [akunUsername], references: [username])
  akunUsername String?        @unique @db.VarChar(255)
  pembelajaran Pembelajaran[]
}

model Prodi {
  kode  String  @id @db.VarChar(10)
  nama  String  @db.VarChar(255)
  kelas Kelas[]
}

model Kelas {
  kode         String         @id @default(cuid()) @db.VarChar(30)
  nama         String
  angkatan     Int
  prodiKode    String         @db.VarChar(10)
  prodi        Prodi          @relation(fields: [prodiKode], references: [kode])
  mahasiswa    Mahasiswa[]
  pembelajaran Pembelajaran[]
}

model Pembelajaran {
  id                Int         @id @default(autoincrement())
  kelas             Kelas       @relation(fields: [kelasKode], references: [kode])
  kelasKode         String      @db.VarChar(30)
  matakuliah        Matakuliah  @relation(fields: [matakuliahKode], references: [kode])
  tahunPembelajaran String      @db.VarChar(40)
  semester          Int
  totalJam          Int
  sks               Int
  pertemuan         Pertemuan[]
  matakuliahKode    String      @db.VarChar(12)
  dosen             Dosen       @relation(fields: [dosenNidn], references: [nidn])
  dosenNidn         String      @db.Char(10)
}

model Matakuliah {
  kode         String         @id @db.VarChar(12)
  nama         String
  pembelajaran Pembelajaran[]
}

model Pertemuan {
  id              Int          @id @default(autoincrement())
  pertemuanKe     Int          @db.SmallInt
  judulMateri     String       @db.VarChar(255)
  deskripsiMateri String
  statusTimer     Timer        @default(belum_dimulai)
  timerPresensi   Int
  waktuMulai      DateTime?
  tanggal         DateTime
  presensi        Presensi[]
  pembelajaran    Pembelajaran @relation(fields: [pembelajaranId], references: [id])
  pembelajaranId  Int
}

enum JenisAbsensi {
  sakit
  izin
  alpha
  masuk
}

enum Timer {
  belum_dimulai
  berjalan
  selesai
}

model Presensi {
  id           Int           @id @default(autoincrement())
  jameKe       Int //urutan jam dari presensi
  pertemuanId  Int
  pertemuan    Pertemuan     @relation(fields: [pertemuanId], references: [id], onDelete: Cascade)
  mahasiswaNim String        @db.Char(10)
  mahasiswa    Mahasiswa     @relation(fields: [mahasiswaNim], references: [nim])
  jenis        JenisAbsensi?
  keterangan   String?
}
